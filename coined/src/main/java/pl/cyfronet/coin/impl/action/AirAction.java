/*
 * Copyright 2012 ACC CYFRONET AGH
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package pl.cyfronet.coin.impl.action;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import pl.cyfronet.coin.api.exception.AtomicServiceInstanceNotFoundException;
import pl.cyfronet.coin.api.exception.AtomicServiceNotFoundException;
import pl.cyfronet.coin.impl.air.client.ATEndpoint;
import pl.cyfronet.coin.impl.air.client.ApplianceType;
import pl.cyfronet.coin.impl.air.client.Vms;
import pl.cyfronet.coin.impl.air.client.WorkflowDetail;

/**
 * @author <a href="mailto:mkasztelnik@gmail.com">Marek Kasztelnik</a>
 * @param <T> Result generated by the action.
 */
public abstract class AirAction<T> extends BaseAction<T> {

	private static final Logger logger = LoggerFactory
			.getLogger(AirAction.class);

	public AirAction(ActionFactory actionFactory) {
		super(actionFactory);
	}

	protected List<ApplianceType> getApplianceTypes(boolean loadDescriptors) {
		return getAir().getApplianceTypes(null, loadDescriptors);
	}

	protected ApplianceType getApplianceType(String applianceTypeId)
			throws AtomicServiceNotFoundException {
		return getApplianceType(applianceTypeId, true);
	}

	protected ApplianceType getApplianceType(String applianceTypeId,
			boolean loadDescriptors) throws AtomicServiceNotFoundException {
		List<ApplianceType> applianceTypes = getAir().getApplianceTypes(
				applianceTypeId, loadDescriptors);

		for (ApplianceType applianceType : applianceTypes) {
			String id = applianceType.getId();
			if (id != null && id.equals(applianceTypeId)) {
				return applianceType;
			}
		}

		logger.warn("Atomic service {} not found", applianceTypeId);
		throw new AtomicServiceNotFoundException();
	}

	protected void loadEndpointDescriptors(ApplianceType applianceType) {
		if (applianceType.getEndpoints() != null) {
			for (ATEndpoint endpoint : applianceType.getEndpoints()) {
				endpoint.setDescriptor(getAir().getEndpointDescriptor(
						endpoint.getId()));
			}
		}
	}

	protected Vms getAsi(String username, String contextId, String asiIdentifier)
			throws AtomicServiceInstanceNotFoundException {
		Action<WorkflowDetail> getWfDetailAct = getActionFactory()
				.createGetWorkflowDetailAction(contextId, username);
		WorkflowDetail wfd = getWfDetailAct.execute();
		for (Vms instance : wfd.getVms()) {
			if (asiIdentifier.equals(instance.getVms_id())
					|| asiIdentifier.equals(instance.getConfiguration())) {
				return instance;
			}
		}
		throw new AtomicServiceInstanceNotFoundException();
	}
}

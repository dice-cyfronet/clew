/*
 * Copyright 2012 ACC CYFRONET AGH
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package pl.cyfronet.coin.impl.action;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import pl.cyfronet.coin.api.beans.WorkflowType;
import pl.cyfronet.coin.api.exception.CloudFacadeException;
import pl.cyfronet.coin.impl.air.client.AirClient;
import pl.cyfronet.dyrealla.api.DyReAllaManagerService;
import pl.cyfronet.dyrealla.api.allocation.ManagerResponse;
import pl.cyfronet.dyrealla.api.allocation.RunMode;
import pl.cyfronet.dyrealla.api.allocation.impl.AddRequiredAppliancesRequestImpl;
import pl.cyfronet.dyrealla.api.allocation.impl.ApplianceIdentityImpl;

/**
 * @author <a href="mailto:mkasztelnik@gmail.com">Marek Kasztelnik</a>
 * @param <T> Result generated by the action.
 */
public abstract class AtomicServiceWorkflowAction<T> extends WorkflowAction<T> {

	AtomicServiceWorkflowAction(AirClient air,
			DyReAllaManagerService atmosphere, String username) {
		super(air, atmosphere, username);
	}

	/**
	 * Register appliance types (with specific configuration id) for workflow.
	 * @param contextId Context id (e.k.a. workflow id).
	 * @param configIds List of appliance types configurations ids.
	 * @param priority Workflow priority.
	 */
	protected void registerVms(String contextId, List<String> configIds,
			List<String> names, Integer priority, WorkflowType workflowType,
			String keyId) throws CloudFacadeException {
		if (configIds != null && configIds.size() > 0) {
			String[] ids = configIds.toArray(new String[0]);
			logger.debug(
					"Registering required atomic services in atmosphere {} with key {}",
					Arrays.toString(ids), keyId);

			AddRequiredAppliancesRequestImpl request = new AddRequiredAppliancesRequestImpl();
			request.setImportanceLevel(priority);
			request.setCorrelationId(contextId);
			request.setUsername(getUsername());
			request.setApplianceIdentities(getApplianceIdentities(configIds,
					names));
			RunMode runMode = getRunMode(workflowType);
			request.setRunMode(runMode);
			request.setKeyPairName(getKeyPairId(runMode, keyId));

			ManagerResponse response = getAtmosphere().addRequiredAppliances(
					request);
			parseResponseAndThrowExceptionsWhenNeeded(response);
		}
	}

	/**
	 * @param workflowType
	 * @param keyId
	 * @return If workflow is in development mode returns keyId null otherwise.
	 */
	private String getKeyPairId(RunMode runMode, String keyId) {
		if (runMode == RunMode.DEVELOPMENT) {
			return keyId;
		} else {
			return null;
		}
	}

	private RunMode getRunMode(WorkflowType workflowType) {
		return workflowType == WorkflowType.development ? RunMode.DEVELOPMENT
				: RunMode.PRODUCTION;
	}

	private List<ApplianceIdentityImpl> getApplianceIdentities(
			List<String> configIds, List<String> names) {
		List<ApplianceIdentityImpl> identities = new ArrayList<ApplianceIdentityImpl>();
		for (int i = 0; i < configIds.size(); i++) {
			String asId = configIds.get(i);
			ApplianceIdentityImpl identity = new ApplianceIdentityImpl();
			identity.setInitConfId(asId);
			String name = null;
			if (names != null && names.size() > i) {
				name = names.get(i);
			}
			identity.setName(name);
			identities.add(identity);
		}
		return identities;
	}
}
